import aframe from 'aframe'
import 'aframe-animation-component'
import { initElement } from '../lib/utils'

const cloudPoint = aframe.registerPrimitive('cloud-point', {
    defaultComponents: {
        'cloudpoint': ''
    }
})

aframe.registerComponent('cloudpoint', {
    schema: {
        debug: {type: 'boolean', default: false},
        maxx: {type: 'number', default: 2},
        maxy: {type: 'number', default: 2},
        maxz: {type: 'number', default: 2},

        offsetx: {type: 'number', default: 0},
        offsety: {type: 'number', default: 0},
        offsetz: {type: 'number', default: 0},

        preset: {type: 'number', default: -1},

        size: {type: 'number', default: 0.3},
        point: {type: 'number', default: 7},
        color: { type: 'array', default: [ '#FF926B', '#424242' ]},
        rotation: {type: 'boolean', default: true},
        movement: {type: 'boolean', default: false}
    },
    init: function() {

        const a = this.data.maxx
        const b = this.data.maxy
        const c = this.data.maxz
        const size = this.data.size

        const usePreset = this.data.preset > -1 && presets.length-1 >= this.data.preset

        const maxPoint = (usePreset)? presets[this.data.preset].positions.length : this.data.point

        let prevPos = '0 0 0'

        for (let i = 0; i < maxPoint; i++) {

            let x = 0
            let y = 0 
            let z = 0

            let pos = x + " " + y + " " + z
            let r = 0.1

            if(usePreset){

                pos = presets[this.data.preset].positions[i]
                r = (presets[this.data.preset].sizes.length-1 >= i)? presets[this.data.preset].sizes[i] : Math.random() * (size + 0.1) 

            }else{

                x = this.data.offsetx + Math.random() * (a - (-a) + 1) -a 
                y = this.data.offsety + Math.random() * (b - (-b) + 1) -b 
                z = this.data.offsetz + Math.random() * (c - (-c) + 1) -c

                pos = x + " " + y + " " + z

                r = Math.random() * (size + 0.1) 

            }

            if(this.data.debug){
                console.log(pos)
            }
            
            const col = this.data.color[Math.floor(Math.random() * this.data.color.length)]


            const point = initElement('a-dodecahedron',{
                color: col,
                radius: r,
                position: pos
            })
            
            if(this.data.rotation){
                point.setAttribute(
                    'animation__rotation',
                    {
                        property: 'rotation',
                        loop: 'true',
                        easing: 'linear',
                        from: '0 0 0',
                        to: '0 360 0',
                        dur: '5000'
                    }
                )
            }

            if(this.data.movement){

                point.setAttribute(
                    'animation__position',
                    {
                        property: 'position',
                        loop: 'true',
                        dir: 'alternate',
                        easing: 'easeInOutBack',
                        from: pos,
                        to: prevPos,
                        dur: '60000'
                    }
                )
                prevPos = pos
            }
    
            this.el.appendChild(point)  
            
        }

        if(this.data.debug){
            console.log("-------------------")
        }
       

    }
})

const presets = [
    {
        positions:[
            '1.4110595138996915 -1.2403440864025188 0.39653995951559007',
             '2.0701201240237532 -0.727538516680668 0.35090449162389725',
             '1.02929549997733 0.9543887990629427 0.05233501268882912',
             '0.1281027576606606 -1.3243097056868764 0.2943497133657098',
             '-0.9524889784623864 -3.371545076149054 0.6111398421609133',
             '1.4187434319870293 -2.0294428707380603 0.5274305155572832',
             '1.9326013571198981 2.492849422895892 0.8589264470830671',
             '1.0682955090194728 -3.6791611177219545 0.6464722220554118',
             '-0.9810760659386579 -0.08565721374095059 0.6669918384660554',
             '2.3718989508079558 0.1313503213993812 0.3814114237954953',
             '2.4399472556946806 0.7082412932238666 0.053196099988984225',
             '0.6608452547841868 -2.0839689982661573 0.2622904258390286',
             '0.9047960072438856 0.9448021286529587 0.39046075552398296',
             '-0.23994001990515823 -4.442230773829626 0.46892121338031556',
             '2.143519401148782 2.135728517738496 0.9487369016304086',
             '1.390511115583422 -2.4216846209294323 0.015630731898123917',
             '0.6287768806235654 1.492558919700663 0.030512777483777453',
             '1.449725842255197 -0.0912680338842895 0.5122628400577378',
             '1.3140416916047988 -1.8249623368976695 0.105577538882069',
             '-1.2109265859160976 -4.164489250170604 0.7191148150897615',
             '0.10922218051061083 -4.1089500469592 0.7169489663973592',
             '1.2681959544456225 -3.8582084458523225 0.35498835821236563',
             '1.7283039472859887 -3.4055051945149164 0.7845572737492654',
             '-0.8618966010745837 -0.9494126487100019 0.9199919030403862',
             '0.5149172650790064 -0.5450472063399343 0.6237135309690784',
             '1.523288790706859 1.620003582355496 0.19230558583947488',
             '1.4355161065207458 1.5148748941359598 0.1165630480268327',
             '2.404365953217698 -0.5890054468181711 0.26331194484255604',
             '-0.9309916102489488 -1.71749999108629 0.03842683720571638',
             '-0.4853030419009068 -1.6157767054405783 0.38824835392578927'
        ],
        sizes:[]
    },
    {
        positions:[
            '1.8615071967224308 0.6777750774818996 0.2544470636575522',
            ' -1.1956043357988397 1.429552256739374 0.6493611190206219',
            ' -0.14879036733616147 0.5246584399793797 0.9041869069689772',
            ' 1.7480923936858446 -2.9306017335943855 0.8210858571480735',
            ' -1.1717886285872625 -4.383725182032737 0.5201209157282787',
            ' 0.4876088954555131 -2.8029914824091 0.4385019306740152',
            ' 1.8402110504748768 -3.512589541307336 0.33707952433865107',
            ' 2.232157549995777 -1.4400848670808015 0.35742855308589494',
            ' -1.3873247506336694 -0.5569911060967927 0.23062982295175982',
            ' 0.8815077394038155 -1.0854255111951634 0.7188205945762554',
            ' -0.21527923182604614 -1.6534138469539905 0.7659332382224497',
            ' 0.564979744500393 1.8157296885203413 0.6126150767208183',
            ' 2.107364488716037 -3.9067973855856 0.21952916069364026',
            ' 0.46664049594139634 0.7653118135223496 0.2865468237012634',
            ' 0.44400607704218054 -1.503700182137326 0.8431302505322218',
            ' 0.11085905390222717 1.6641120790734698 0.6834346727690694',
            ' 1.5271703408545596 -2.8725748378310367 0.5927142366860452',
            ' -0.5607731944083394 -1.721932045560374 0.21334708350728881',
            ' 0.8883696886299202 -2.59869123452596 0.22671458577848358',
            ' 1.0302326285725814 0.0493791521651481 0.2947249105560805',
            ' 1.1050192457397312 -1.509723552212773 0.23151593759705946',
            ' 1.8282070773265868 1.29908878035911 0.4230350648453871',
            ' -1.4420818929841674 -2.5931054896080044 0.5885959035736199',
            ' 1.7866518241153297 1.3966810011554083 0.28187862165912625',
            ' -0.3348102122656824 -0.8060067022983413 0.5415151948347077',
            ' -0.8136923228270883 -2.176573043772298 0.1789674765954623',
            ' -0.007401837668603584 0.9083725131782812 0.8521434596363835',
            ' 1.135075329933266 -3.197677259771008 0.1744223705413186',
            ' 1.1733212321862174 -0.9195386775100127 0.8528250334593452',
            ' 0.45602327692752276 1.2939095059586423 0.6625886338305118'
        ],

        sizes:[]
    }

]

export default cloudPoint